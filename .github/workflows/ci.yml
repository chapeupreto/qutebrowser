name: CI
on:
  push:
    branches-ignore:
      - 'update-dependencies'
      - 'dependabot/*'
  pull_request:
env:
  FORCE_COLOR: "1"
  PY_COLORS: "1"
  MYPY_FORCE_TERMINAL_WIDTH: "180"

jobs:
  linters:
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    timeout-minutes: 10
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - testenv: pylint
          - testenv: flake8
          - testenv: mypy-pyqt6
          - testenv: mypy-pyqt5
          - testenv: docs
          - testenv: vulture
          - testenv: misc
          - testenv: pyroma
          - testenv: check-manifest
          - testenv: eslint
          - testenv: shellcheck
            args: "-f gcc"  # For problem matchers
          - testenv: yamllint
          - testenv: actionlint
          - testenv: package
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/cache@v4
        with:
          path: |
            .mypy_cache
            .tox
            ~/.cache/pip
          key: "${{ matrix.testenv }}-${{ hashFiles('misc/requirements/requirements-*.txt') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('scripts/dev/pylint_checkers/qute_pylint/*.py') }}"
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: actions/setup-node@v4
        with:
          node-version: '16.x'
        if: "matrix.testenv == 'eslint'"
      - name: Set up problem matchers
        run: "python scripts/dev/ci/problemmatchers.py ${{ matrix.testenv }} ${{ runner.temp }}"
      - name: Install dependencies
        run: |
            [[ ${{ matrix.testenv }} == eslint ]] && npm install -g 'eslint@<9.0.0'
            [[ ${{ matrix.testenv }} == docs ]] && sudo apt-get update && sudo apt-get install --no-install-recommends asciidoc libegl1-mesa
            [[ ${{ matrix.testenv }} == vulture || ${{ matrix.testenv }} == pylint ]] && sudo apt-get update && sudo apt-get install --no-install-recommends libegl1-mesa
            if [[ ${{ matrix.testenv }} == shellcheck ]]; then
                scversion="stable"
                bindir="$HOME/.local/bin"
                mkdir -p "$bindir"
                wget -qO- "https://github.com/koalaman/shellcheck/releases/download/$scversion/shellcheck-$scversion.linux.x86_64.tar.xz" | tar -xJv --strip-components 1 -C "$bindir" shellcheck-$scversion/shellcheck
                echo "$bindir" >> "$GITHUB_PATH"
            fi
            if [[ ${{ matrix.testenv }} == actionlint ]]; then
                bindir="$HOME/.local/bin"
                mkdir -p "$bindir"
                wget -q https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash
                bash download-actionlint.bash latest "$bindir"
                echo "$bindir" >> "$GITHUB_PATH"
            fi
            python -m pip install -U pip
            python -m pip install -U -r misc/requirements/requirements-tox.txt
      - name: "Run ${{ matrix.testenv }}"
        run: |
            if [[ -z "${{ matrix.args }}" ]]; then
                dbus-run-session -- tox -e ${{ matrix.testenv }}
            else
                dbus-run-session -- tox -e ${{ matrix.testenv }} -- ${{ matrix.args }}
            fi

  tests-docker:
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    timeout-minutes: 45
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - testenv: py-qt5
            image: archlinux-webkit
            args: "tests/unit"
          - testenv: py-qt5
            image: archlinux-webkit
            args: "tests/end2end"
    container:
      image: "qutebrowser/ci:${{ matrix.image }}"
      env:
        DOCKER: "${{ matrix.image }}"
        CI: true
        PYTEST_ADDOPTS: "--color=yes"
      volumes:
        # Hardcoded because we can't use ${{ runner.temp }} here apparently.
        - /home/runner/work/_temp/:/home/runner/work/_temp/
      options: --privileged --tty
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up problem matchers
        run: "python scripts/dev/ci/problemmatchers.py tests ${{ runner.temp }}"
      - name: Run tox
        run: "dbus-run-session -- tox -e ${{ matrix.testenv }} -- ${{ matrix.args }}"
